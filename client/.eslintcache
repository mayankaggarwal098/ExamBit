[{"C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\index.js":"1","C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\reportWebVitals.js":"2","C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\App.js":"3","C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\store.js":"4","C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\screen\\Login.jsx":"5","C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\component\\Header.jsx":"6","C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\reducer\\userReducer.jsx":"7","C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\component\\Instruction.jsx":"8","C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\screen\\Register.jsx":"9","C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\screen\\QuestionCreate.jsx":"10","C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\screen\\StudentRegistered.jsx":"11","C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\screen\\QuestionList.jsx":"12","C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\screen\\TestList.jsx":"13","C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\screen\\TestPaper.jsx":"14","C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\reducer\\responseSheetReducer.jsx":"15","C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\reducer\\questionReducer.jsx":"16","C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\screen\\TestCreate.jsx":"17","C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\reducer\\testReducer.jsx":"18","C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\reducer\\studentRegistrationReducer.jsx":"19","C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\component\\Loader.jsx":"20","C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\actions\\userAction.jsx":"21","C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\component\\QuestionPaper.jsx":"22","C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\constants\\userConstanst.jsx":"23","C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\constants\\questionConstant.jsx":"24","C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\component\\Pagination.jsx":"25","C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\component\\QuestionDetails.jsx":"26","C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\component\\Clock.jsx":"27","C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\actions\\studentRegistrationAction.jsx":"28","C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\actions\\responseSheetAction.jsx":"29","C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\actions\\questionAction.jsx":"30","C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\actions\\testAction.jsx":"31","C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\constants\\responseSheetConstant.jsx":"32","C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\constants\\testConstant.jsx":"33","C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\constants\\studentRegistrationConstant.jsx":"34","C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\component\\httpService.jsx":"35","C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\reducer\\supervisorReducer.jsx":"36","C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\constants\\supervisorConstant.jsx":"37","C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\screen\\SupervisorList.jsx":"38","C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\actions\\supervisorAction.jsx":"39","C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\component\\SupervisorTable.jsx":"40","C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\screen\\SupervisorReqList.jsx":"41","C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\screen\\StudentResult.jsx":"42","C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\reducer\\generateResultReducer.jsx":"43","C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\component\\Statistics.jsx":"44","C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\actions\\generateResultAction.jsx":"45","C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\component\\SingleQuestion.jsx":"46","C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\constants\\generateResultConstant.jsx":"47","C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\utils\\paginate.jsx":"48","C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\screen\\EmailNotification.jsx":"49","C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\actions\\snapshots.jsx":"50","C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\utils\\Trainees.jsx":"51"},{"size":664,"mtime":1609592424398,"results":"52","hashOfConfig":"53"},{"size":364,"mtime":1609592427776,"results":"54","hashOfConfig":"53"},{"size":2047,"mtime":1610223690836,"results":"55","hashOfConfig":"53"},{"size":2605,"mtime":1610286730917,"results":"56","hashOfConfig":"53"},{"size":1978,"mtime":1609591175434,"results":"57","hashOfConfig":"53"},{"size":3554,"mtime":1609962052374,"results":"58","hashOfConfig":"53"},{"size":979,"mtime":1609592194370,"results":"59","hashOfConfig":"53"},{"size":2611,"mtime":1610223690840,"results":"60","hashOfConfig":"53"},{"size":3605,"mtime":1609831507027,"results":"61","hashOfConfig":"53"},{"size":5558,"mtime":1610286730913,"results":"62","hashOfConfig":"53"},{"size":2602,"mtime":1610223690846,"results":"63","hashOfConfig":"53"},{"size":6037,"mtime":1610286730914,"results":"64","hashOfConfig":"53"},{"size":7211,"mtime":1610286730916,"results":"65","hashOfConfig":"53"},{"size":6436,"mtime":1610288658245,"results":"66","hashOfConfig":"53"},{"size":899,"mtime":1609954432996,"results":"67","hashOfConfig":"53"},{"size":1276,"mtime":1609706861857,"results":"68","hashOfConfig":"53"},{"size":5852,"mtime":1609706861860,"results":"69","hashOfConfig":"53"},{"size":2646,"mtime":1610223690844,"results":"70","hashOfConfig":"53"},{"size":2397,"mtime":1610286730912,"results":"71","hashOfConfig":"53"},{"size":411,"mtime":1609592250282,"results":"72","hashOfConfig":"53"},{"size":2101,"mtime":1609592305406,"results":"73","hashOfConfig":"53"},{"size":2073,"mtime":1610189279676,"results":"74","hashOfConfig":"53"},{"size":393,"mtime":1609592222643,"results":"75","hashOfConfig":"53"},{"size":577,"mtime":1609592233054,"results":"76","hashOfConfig":"53"},{"size":1163,"mtime":1610189279673,"results":"77","hashOfConfig":"53"},{"size":1543,"mtime":1610189279675,"results":"78","hashOfConfig":"53"},{"size":2975,"mtime":1610223690839,"results":"79","hashOfConfig":"53"},{"size":4261,"mtime":1610286730908,"results":"80","hashOfConfig":"53"},{"size":1649,"mtime":1609954432990,"results":"81","hashOfConfig":"53"},{"size":3036,"mtime":1610189279668,"results":"82","hashOfConfig":"53"},{"size":5705,"mtime":1610223690838,"results":"83","hashOfConfig":"53"},{"size":428,"mtime":1609954432994,"results":"84","hashOfConfig":"53"},{"size":1160,"mtime":1610223690842,"results":"85","hashOfConfig":"53"},{"size":1108,"mtime":1610286730911,"results":"86","hashOfConfig":"53"},{"size":467,"mtime":1609592262703,"results":"87","hashOfConfig":"53"},{"size":1670,"mtime":1609993559522,"results":"88","hashOfConfig":"53"},{"size":858,"mtime":1609963695893,"results":"89","hashOfConfig":"53"},{"size":767,"mtime":1610189279690,"results":"90","hashOfConfig":"53"},{"size":4318,"mtime":1610028955635,"results":"91","hashOfConfig":"53"},{"size":3077,"mtime":1610028516182,"results":"92","hashOfConfig":"53"},{"size":1872,"mtime":1610285660631,"results":"93","hashOfConfig":"53"},{"size":4531,"mtime":1610286730915,"results":"94","hashOfConfig":"53"},{"size":487,"mtime":1610189279683,"results":"95","hashOfConfig":"53"},{"size":1087,"mtime":1610286730910,"results":"96","hashOfConfig":"53"},{"size":945,"mtime":1610189279667,"results":"97","hashOfConfig":"53"},{"size":2089,"mtime":1610189279676,"results":"98","hashOfConfig":"53"},{"size":195,"mtime":1610189279681,"results":"99","hashOfConfig":"53"},{"size":199,"mtime":1610189279694,"results":"100","hashOfConfig":"53"},{"size":263,"mtime":1610223690845,"results":"101","hashOfConfig":"53"},{"size":588,"mtime":1610226976436,"results":"102","hashOfConfig":"53"},{"size":2106,"mtime":1610286730917,"results":"103","hashOfConfig":"53"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},"bef1lz",{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"106"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"106"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"106"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"106"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"106"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"106"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"106"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"106"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"106"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"106"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"106"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"106"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"106"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"106"},"C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\index.js",[],["221","222"],"C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\reportWebVitals.js",[],"C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\App.js",[],"C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\store.js",[],"C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\screen\\Login.jsx",["223","224"],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Container, Button, Form, Row, Col } from \"react-bootstrap\";\r\nimport { login } from \"../actions/userAction\";\r\n\r\nconst Login = ({ history }) => {\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  const { loading, userInfo, error } = useSelector((state) => state.userLogin);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (userInfo) {\r\n      history.push(\"/\");\r\n    }\r\n  }, [userInfo, history]);\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    dispatch(login(email, password));\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Row className=\"justify-content-md-center my-5\">\r\n        <Col sx={12} md={6}>\r\n          <h2>SIGN IN</h2>\r\n          <Form onSubmit={submitHandler}>\r\n            <Form.Group controlId=\"email\">\r\n              <Form.Label>Email Address</Form.Label>\r\n              <Form.Control\r\n                type=\"email\"\r\n                placeholder=\"Enter Email Address\"\r\n                value={email}\r\n                onChange={(e) => setEmail(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"password\">\r\n              <Form.Label>Password</Form.Label>\r\n              <Form.Control\r\n                type=\"password\"\r\n                placeholder=\"Enter Password\"\r\n                value={password}\r\n                onChange={(e) => setPassword(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n\r\n            <Button type=\"submit\" variant=\"primary\">\r\n              Login\r\n            </Button>\r\n\r\n            <Row className=\"py-3 px-3\">\r\n              NEW USER ? &nbsp;&nbsp; <Link to=\"/register\">REGISTER</Link>\r\n            </Row>\r\n          </Form>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\component\\Header.jsx",["225"],"import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Nav, Navbar, Container, NavDropdown } from \"react-bootstrap\";\r\nimport { LinkContainer } from \"react-router-bootstrap\";\r\nimport { logout } from \"../actions/userAction\";\r\nimport { useEffect } from \"react\";\r\n\r\nconst Header = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const { userInfo } = useSelector((state) => state.userLogin);\r\n\r\n  const logOutHandler = () => {\r\n    dispatch(logout());\r\n  };\r\n\r\n  return (\r\n    <header>\r\n      <Navbar collapseOnSelect expand=\"lg\" bg=\"primary\" variant=\"dark\">\r\n        <Container>\r\n          <LinkContainer to=\"/\">\r\n            <Navbar.Brand>Home</Navbar.Brand>\r\n          </LinkContainer>\r\n          <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n          <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n            <Nav className=\"mr-auto\">\r\n              {userInfo && userInfo.category === \"SUPERVISOR\" && (\r\n                <>\r\n                  <LinkContainer to=\"/questions\">\r\n                    <Nav.Link>\r\n                      <i className=\"fas fa-list\" />\r\n                      &nbsp;All Questions\r\n                    </Nav.Link>\r\n                  </LinkContainer>\r\n                  <LinkContainer to=\"/tests\">\r\n                    <Nav.Link>\r\n                      <i className=\"fas fa-list\" />\r\n                      &nbsp;All Test\r\n                    </Nav.Link>\r\n                  </LinkContainer>\r\n                </>\r\n              )}\r\n              {userInfo && userInfo.category === \"ADMIN\" && (\r\n                <>\r\n                  <LinkContainer to=\"/supervisor\">\r\n                    <Nav.Link>\r\n                      <i className=\"fas fa-list\" />\r\n                      &nbsp;SUPERVISOR\r\n                    </Nav.Link>\r\n                  </LinkContainer>\r\n                  <LinkContainer to=\"/supervisor/request\">\r\n                    <Nav.Link>\r\n                      <i className=\"fas fa-list\" />\r\n                      &nbsp;REQUEST\r\n                    </Nav.Link>\r\n                  </LinkContainer>\r\n                </>\r\n              )}\r\n            </Nav>\r\n            <Nav>\r\n              {userInfo ? (\r\n                <NavDropdown title={userInfo.name.toUpperCase()} id=\"username\">\r\n                  <LinkContainer to=\"/profile\">\r\n                    <NavDropdown.Item>\r\n                      <i className=\"fas fa-user\" />\r\n                      &nbsp;PROFILE\r\n                    </NavDropdown.Item>\r\n                  </LinkContainer>\r\n\r\n                  <LinkContainer to=\"/login\">\r\n                    <NavDropdown.Item onClick={logOutHandler}>\r\n                      <i className=\"fas fa-sign-out-alt\" />\r\n                      &nbsp;LOGOUT\r\n                    </NavDropdown.Item>\r\n                  </LinkContainer>\r\n                </NavDropdown>\r\n              ) : (\r\n                <>\r\n                  <LinkContainer to=\"/login\">\r\n                    <Nav.Link>\r\n                      <i className=\"fas fa-sign-in-alt\" />\r\n                      &nbsp;Login\r\n                    </Nav.Link>\r\n                  </LinkContainer>\r\n\r\n                  <LinkContainer to=\"/register\">\r\n                    <Nav.Link>\r\n                      <i className=\"fas fa-user-plus\" />\r\n                      &nbsp;Sign Up\r\n                    </Nav.Link>\r\n                  </LinkContainer>\r\n                </>\r\n              )}\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Container>\r\n      </Navbar>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\reducer\\userReducer.jsx",[],"C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\component\\Instruction.jsx",[],"C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\screen\\Register.jsx",[],"C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\screen\\QuestionCreate.jsx",[],"C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\screen\\StudentRegistered.jsx",[],"C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\screen\\QuestionList.jsx",["226"],"import React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {\r\n  Table,\r\n  Row,\r\n  Col,\r\n  Button,\r\n  Container,\r\n  Modal,\r\n  ListGroup,\r\n} from 'react-bootstrap';\r\nimport { getAllQuestions } from '../actions/questionAction';\r\nimport { deleteQuestion } from '../actions/questionAction';\r\nimport Loader from '../component/Loader';\r\nimport { paginate } from '../utils/paginate';\r\nimport Paginations from '../component/Pagination';\r\n\r\nconst QuestionList = ({ history }) => {\r\n  const [show, setShow] = useState(false);\r\n  const [pos, setIndex] = useState(0);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [pageSize, setPageSize] = useState(5);\r\n\r\n  const { loading, questions } = useSelector(state => state.questionList);\r\n  const { loading: loadingCreate } = useSelector(state => state.createQuestion);\r\n\r\n  const { loading: loadingDelete } = useSelector(state => state.questionDelete);\r\n\r\n  const totalCount = questions && questions.length;\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (!questions) {\r\n      dispatch(getAllQuestions());\r\n    }\r\n  }, [dispatch, questions]);\r\n\r\n  const createHandler = () => {\r\n    history.push('/questions/create');\r\n  };\r\n\r\n  const deleteHandler = id => {\r\n    if (window.confirm('Are you sure ')) {\r\n      dispatch(deleteQuestion(questions, id));\r\n    }\r\n  };\r\n\r\n  const set = index => {\r\n    setShow(true);\r\n    setIndex(index);\r\n  };\r\n\r\n  const handlePageChange = page => {\r\n    setCurrentPage(page);\r\n  };\r\n\r\n  const ques = paginate(questions, currentPage, pageSize);\r\n\r\n  return (\r\n    <>\r\n      {loadingCreate && <Loader />}\r\n      {loadingDelete && <Loader />}\r\n      {loading && <Loader />}\r\n      <Container>\r\n        <Row className=\"align-items-center\">\r\n          <Col>\r\n            <h3 style={{ color: 'black' }}>All Questions</h3>\r\n          </Col>\r\n          <Col className=\"text-right\">\r\n            <Button className=\"my-3\" onClick={createHandler}>\r\n              <i className=\"fas fa-plus\"></i>&nbsp;&nbsp;Add New Question\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n        <Table hover bordered striped responsive className=\"table-lg\">\r\n          <thead>\r\n            <tr>\r\n              <th>SUBJECT</th>\r\n              <th>QUESTION</th>\r\n              <th>WEIGHTAGE</th>\r\n              <th>&nbsp;&nbsp;ACTION&nbsp;&nbsp;</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {ques &&\r\n              ques.map((question, index) => (\r\n                <tr key={question._id}>\r\n                  <td>{question.subject}</td>\r\n                  <td>{question.questionBody}</td>\r\n                  <td>{question.weightage}</td>\r\n                  <td>\r\n                    <Button\r\n                      variant=\"primary\"\r\n                      className=\"btn-sm\"\r\n                      onClick={() => set(index)}\r\n                    >\r\n                      <i className=\"fas fa-info-circle\"></i>\r\n                    </Button>\r\n                    &nbsp;\r\n                    <Button\r\n                      variant=\"primary\"\r\n                      className=\"btn-sm\"\r\n                      onClick={() => deleteHandler(question._id)}\r\n                    >\r\n                      <i className=\"fas fa-trash\"></i>\r\n                    </Button>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n          </tbody>\r\n        </Table>\r\n        <Paginations\r\n          itemsCount={totalCount}\r\n          pageSize={pageSize}\r\n          currentPage={currentPage}\r\n          onPageChange={handlePageChange}\r\n        />\r\n      </Container>\r\n      {ques && ques[pos] && (\r\n        <Modal\r\n          show={show}\r\n          onHide={() => setShow(false)}\r\n          dialogClassName=\"my-modal\"\r\n          aria-labelledby=\"example-custom-modal-styling-title\"\r\n        >\r\n          <Modal.Header closeButton>\r\n            <Modal.Title id=\"example-custom-modal-styling-title\">\r\n              QuestionID: {ques[pos]._id}\r\n            </Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <ListGroup variant=\"flush\">\r\n              <ListGroup.Item>\r\n                <strong>\r\n                  <b>SUBJECT</b>\r\n                </strong>{' '}\r\n                : {ques[pos].subject}\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <strong>\r\n                  <b>WEIGHTAGE</b>\r\n                </strong>{' '}\r\n                : {ques[pos].weightage}\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <strong>\r\n                  <b>QUESTION</b>\r\n                </strong>{' '}\r\n                : {ques[pos].questionBody}\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <strong>\r\n                  <b>OPTIONS</b>\r\n                </strong>\r\n                <br></br>\r\n                {ques[pos].options.map((opt, index) => (\r\n                  <>\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                    <strong>{index + 1}</strong>: {opt.optionBody}\r\n                    <br></br>\r\n                  </>\r\n                ))}\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <strong>\r\n                  <b>Answer:</b>{' '}\r\n                </strong>\r\n                {ques[pos].options.map((opt, index) => (\r\n                  <>\r\n                    {opt.isAnswer && (\r\n                      <>\r\n                        <strong>Option{index + 1}</strong>: {opt.optionBody}\r\n                        ,&nbsp;\r\n                      </>\r\n                    )}\r\n                  </>\r\n                ))}\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <strong>\r\n                  <b>EXPLAINATION</b>\r\n                </strong>{' '}\r\n                : {ques[pos].explaination}\r\n              </ListGroup.Item>\r\n            </ListGroup>\r\n          </Modal.Body>\r\n        </Modal>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default QuestionList;\r\n","C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\screen\\TestList.jsx",["227","228","229"],"import React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {\r\n  Table,\r\n  Row,\r\n  Col,\r\n  Button,\r\n  Container,\r\n  Modal,\r\n  Tab,\r\n  Tabs,\r\n} from 'react-bootstrap';\r\nimport {\r\n  getTestPaperList,\r\n  testBegin,\r\n  testPaperDelete,\r\n} from '../actions/testAction';\r\nimport Loader from '../component/Loader';\r\nimport QuestionPaper from '../component/QuestionPaper';\r\nimport QuestionDetails from '../component/QuestionDetails';\r\nimport { openRegistrationforTest } from '../actions/studentRegistrationAction';\r\nimport { paginate } from '../utils/paginate';\r\nimport Paginations from '../component/Pagination';\r\nimport Statistics from '../component/Statistics';\r\n\r\nconst TestList = ({ history }) => {\r\n  const [show, setShow] = useState(false);\r\n  const [pos, setIndex] = useState(0);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [pageSize, setPageSize] = useState(2);\r\n\r\n  const { loading, error, testPapers } = useSelector(\r\n    state => state.getTestPaper\r\n  );\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (!testPapers) {\r\n      dispatch(getTestPaperList());\r\n    }\r\n  }, []);\r\n\r\n  //PAGINATION\r\n  const totalCount = testPapers && testPapers.length;\r\n\r\n  const handlePageChange = page => {\r\n    setCurrentPage(page);\r\n  };\r\n\r\n  const testPaperSheet = paginate(testPapers, currentPage, pageSize);\r\n\r\n  const set = index => {\r\n    setShow(true);\r\n    setIndex(index);\r\n  };\r\n\r\n  const createHandler = () => {\r\n    history.push('/tests/create');\r\n  };\r\n\r\n  const deleteHandler = id => {\r\n    if (window.confirm('Are you sure')) {\r\n      dispatch(testPaperDelete(testPapers, id));\r\n    }\r\n  };\r\n\r\n  const handleClick = (id, status) => {\r\n    status = status ? false : true;\r\n    dispatch(openRegistrationforTest({ testPapers, id, status }));\r\n  };\r\n  return (\r\n    <>\r\n      {loading && <Loader />}\r\n      <Container>\r\n        <Row className=\"align-items-center\">\r\n          <Col>\r\n            <h3 style={{ color: 'black' }}>All Tests</h3>\r\n          </Col>\r\n          <Col className=\"text-right\">\r\n            <Button className=\"my-3\" onClick={createHandler}>\r\n              <i className=\"fas fa-plus\"></i>&nbsp;&nbsp;Create New Test\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n        <Table\r\n          hover\r\n          bordered\r\n          striped\r\n          responsive\r\n          style={{ textAlign: 'center' }}\r\n        >\r\n          <thead>\r\n            <tr>\r\n              <th>SUBJECT</th>\r\n              <th>TITLE</th>\r\n              <th>DURATION(in minute)</th>\r\n              <th>REGISTRATION</th>\r\n              <th></th>\r\n              <th>TEST CONDUCT</th>\r\n              <th>&nbsp;&nbsp;ACTION&nbsp;&nbsp;</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {testPaperSheet &&\r\n              testPaperSheet.map((test, index) => (\r\n                <tr key={test._id} style={{ textAlign: 'center' }}>\r\n                  <td>{test.subject}</td>\r\n                  <td>{test.title}</td>\r\n                  <td>{test.duration}</td>\r\n                  <td>\r\n                    <Button\r\n                      variant=\"outline-primary\"\r\n                      className=\"btn btn-block\"\r\n                      disabled={test.isTestBegins}\r\n                      onClick={() =>\r\n                        handleClick(test._id, test.isRegistrationAvailable)\r\n                      }\r\n                    >\r\n                      {test.isRegistrationAvailable ? 'Close' : 'Open'}\r\n                    </Button>\r\n                  </td>\r\n                  <td>\r\n                    <Button\r\n                      variant=\"outline-primary\"\r\n                      className=\"btn btn-block\"\r\n                      disabled={test.isTestBegins}\r\n                      onClick={() =>\r\n                        dispatch(testBegin(test._id, index, testPapers))\r\n                      }\r\n                    >\r\n                      Start Test\r\n                    </Button>\r\n                  </td>\r\n                  <td>\r\n                    {test.isTestConducted ? (\r\n                      <i\r\n                        className=\"fas fa-check\"\r\n                        style={{ color: 'green' }}\r\n                      ></i>\r\n                    ) : (\r\n                      <i className=\"fa fa-times\" style={{ color: 'red' }}></i>\r\n                    )}\r\n                  </td>\r\n                  <td>\r\n                    <Button\r\n                      variant=\"outline-primary\"\r\n                      className=\"btn-sm\"\r\n                      onClick={() => set(index)}\r\n                    >\r\n                      <i className=\"fas fa-info-circle\"></i>\r\n                    </Button>\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;\r\n                    <Button\r\n                      variant=\"outline-primary\"\r\n                      className=\"btn-sm\"\r\n                      onClick={() => deleteHandler(test._id)}\r\n                    >\r\n                      <i className=\"fas fa-trash\"></i>\r\n                    </Button>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n          </tbody>\r\n        </Table>\r\n        <Paginations\r\n          itemsCount={totalCount}\r\n          pageSize={pageSize}\r\n          currentPage={currentPage}\r\n          onPageChange={handlePageChange}\r\n        />\r\n      </Container>\r\n      {testPaperSheet && testPaperSheet[pos] && (\r\n        <Modal\r\n          show={show}\r\n          onHide={() => setShow(false)}\r\n          dialogClassName=\"my-modal\"\r\n          aria-labelledby=\"example-custom-modal-styling-title\"\r\n        >\r\n          <Modal.Header closeButton>\r\n            <Modal.Title id=\"example-custom-modal-styling-title\">\r\n              TestID: {testPaperSheet[pos]._id}\r\n            </Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <Tabs defaultActiveKey=\"details\" id=\"uncontrolled-tab-example\">\r\n              <Tab\r\n                eventKey=\"details\"\r\n                title={<i className=\"fas fa-info-circle\"> Details</i>}\r\n              >\r\n                <QuestionDetails testPaperSheet={testPaperSheet} pos={pos} />\r\n              </Tab>\r\n              <Tab\r\n                eventKey=\"questions\"\r\n                title={<i className=\"fas fa-question-circle\"> Question</i>}\r\n              >\r\n                <QuestionPaper testPaperSheet={testPaperSheet} pos={pos} />\r\n              </Tab>\r\n              <Tab\r\n                eventKey=\"trainee\"\r\n                title={<i className=\"fas fa-user\"> Trainees</i>}\r\n              >\r\n                rawat\r\n              </Tab>\r\n              <Tab\r\n                eventKey=\"statistics\"\r\n                title={<i className=\"fas fa-chart-bar\"> Statistics</i>}\r\n              >\r\n                <Statistics id={testPaperSheet[pos]._id} />\r\n              </Tab>\r\n              <Tab\r\n                eventKey=\"feedback\"\r\n                title={<i className=\"fas fa-comments\"> FeedBack</i>}\r\n              >\r\n                rawat\r\n              </Tab>\r\n            </Tabs>\r\n          </Modal.Body>\r\n        </Modal>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TestList;\r\n","C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\screen\\TestPaper.jsx",["230","231","232"],"C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\reducer\\responseSheetReducer.jsx",[],"C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\reducer\\questionReducer.jsx",[],"C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\screen\\TestCreate.jsx",["233"],"import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Form,\r\n  Container,\r\n  Button,\r\n  Row,\r\n  Col,\r\n  Modal,\r\n  ListGroup,\r\n} from 'react-bootstrap';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getAllQuestions } from '../actions/questionAction';\r\nimport { createTest } from '../actions/testAction';\r\n\r\nconst TestCreate = ({ history }) => {\r\n  const [show, setShow] = useState(false);\r\n  const [title, setTitle] = useState('');\r\n  const [subject, setSubject] = useState('');\r\n  const [duration, setDuration] = useState('');\r\n  const [selectQuestion, setSelectQuestion] = useState([]);\r\n\r\n  const { questions } = useSelector(state => state.questionList);\r\n\r\n  const { testPapers } = useSelector(state => state.getTestPaper);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (!questions) {\r\n      dispatch(getAllQuestions());\r\n    }\r\n  }, []);\r\n\r\n  const submitQuestionHandler = e => {\r\n    let arr = [...selectQuestion];\r\n\r\n    if (e.target.checked) {\r\n      arr.push(e.target.value);\r\n    } else {\r\n      arr = arr.filter(a => a !== e.target.value);\r\n    }\r\n\r\n    setSelectQuestion(arr);\r\n  };\r\n\r\n  const submitHandler = e => {\r\n    e.preventDefault();\r\n    dispatch(\r\n      createTest(testPapers, { title, subject, duration, selectQuestion })\r\n    );\r\n    history.push('/tests');\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Container className=\"my-5\">\r\n        <Form onSubmit={submitHandler}>\r\n          <Form.Group controlId=\"title\">\r\n            <Form.Label>\r\n              <i className=\"fas fa-pen\"></i> Title\r\n            </Form.Label>\r\n            <Form.Control\r\n              required\r\n              placeholder=\"Title...\"\r\n              type=\"text\"\r\n              value={title}\r\n              onChange={e => setTitle(e.target.value)}\r\n            />\r\n          </Form.Group>\r\n\r\n          <Form.Row>\r\n            <Form.Group as={Col} controlId=\"subject\">\r\n              <Form.Label>\r\n                <i className=\"fas fa-book\"></i> Subject\r\n              </Form.Label>\r\n              <Form.Control\r\n                required\r\n                type=\"text\"\r\n                placeholder=\"Subject\"\r\n                value={subject}\r\n                onChange={e => setSubject(e.target.value)}\r\n              />\r\n            </Form.Group>\r\n\r\n            <Form.Group as={Col} controlId=\"duration\">\r\n              <Form.Label>\r\n                <i className=\"fas fa-clock\"></i> Duration\r\n              </Form.Label>\r\n              <Form.Control\r\n                required\r\n                type=\"number\"\r\n                placeholder=\"Select..\"\r\n                value={duration}\r\n                aria-describedby=\"durationInMinute\"\r\n                onChange={e => setDuration(e.target.value)}\r\n              />\r\n              <Form.Text id=\"durationInMinute\" muted>\r\n                Duration must be filled in term of minutes\r\n              </Form.Text>\r\n            </Form.Group>\r\n          </Form.Row>\r\n          <Button variant=\"primary\" onClick={() => setShow(true)}>\r\n            Select Question\r\n          </Button>\r\n          <br />\r\n          <br />\r\n          <Button\r\n            variant=\"primary\"\r\n            type=\"submit\"\r\n            disabled={selectQuestion.length ? false : true}\r\n          >\r\n            Submit\r\n          </Button>\r\n        </Form>\r\n      </Container>\r\n      <Modal\r\n        show={show}\r\n        onHide={() => setShow(false)}\r\n        dialogClassName=\"my-modal\"\r\n        aria-labelledby=\"example-custom-modal-styling-title\"\r\n      >\r\n        <Modal.Body>\r\n          <ListGroup>\r\n            {questions &&\r\n              questions.map((question, index) => (\r\n                <ListGroup.Item key={index}>\r\n                  <Row>\r\n                    <Col md={0.6}>\r\n                      <strong>{index + 1}: </strong>\r\n                    </Col>\r\n                    <Col>\r\n                      <Row>\r\n                        <Col xs={2}>\r\n                          <strong>Subject: </strong>\r\n                        </Col>\r\n                        <Col>{question.subject}</Col>\r\n                      </Row>\r\n                      <Row>\r\n                        <Col xs={2}>\r\n                          <strong>Weightage: </strong>\r\n                        </Col>\r\n                        <Col>{question.weightage}</Col>\r\n                      </Row>\r\n                      <Row>\r\n                        <Col xs={2}>\r\n                          <strong>Question: </strong>\r\n                        </Col>\r\n                        <Col>{question.questionBody}</Col>\r\n                      </Row>\r\n                      <Row>\r\n                        <Col xs={2}>\r\n                          <strong>Options: </strong>\r\n                        </Col>\r\n                        <Col>\r\n                          {question.options.map((opt, index) => (\r\n                            <React.Fragment key={index}>\r\n                              <strong>{index + 1}: </strong>\r\n                              {opt.optionBody}\r\n                              <br />\r\n                            </React.Fragment>\r\n                          ))}\r\n                        </Col>\r\n                      </Row>\r\n                      <Form.Check\r\n                        type=\"checkbox\"\r\n                        value={question._id}\r\n                        checked={\r\n                          selectQuestion.filter(ques => ques === question._id)\r\n                            .length\r\n                            ? true\r\n                            : false\r\n                        }\r\n                        onChange={e => submitQuestionHandler(e)}\r\n                      />\r\n                    </Col>\r\n                  </Row>\r\n                </ListGroup.Item>\r\n              ))}\r\n          </ListGroup>\r\n        </Modal.Body>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TestCreate;\r\n","C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\reducer\\testReducer.jsx",[],"C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\reducer\\studentRegistrationReducer.jsx",[],"C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\component\\Loader.jsx",[],"C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\actions\\userAction.jsx",[],"C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\component\\QuestionPaper.jsx",[],"C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\constants\\userConstanst.jsx",[],"C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\constants\\questionConstant.jsx",[],"C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\component\\Pagination.jsx",["234"],"import React from 'react';\r\nimport { Pagination } from 'react-bootstrap';\r\nimport _ from 'lodash';\r\nimport './clock.css';\r\n\r\nconst Paginations = ({ itemsCount, pageSize, currentPage, onPageChange }) => {\r\n  const pagesCount = Math.ceil(itemsCount / pageSize);\r\n  if (pagesCount === 1) return null;\r\n  const pages = _.range(1, pagesCount + 1);\r\n\r\n  return (\r\n    <nav>\r\n      {/* <ul className=\"pagination\">\r\n        {pages.map(page => (\r\n          <li\r\n            key={page}\r\n            className={page === currentPage ? 'page-item active' : 'page-item'}\r\n          >\r\n            <a className=\"page-link\" onClick={() => onPageChange(page)}>\r\n              {page}\r\n            </a>\r\n          </li>\r\n        ))}\r\n      </ul> */}\r\n      <Pagination>\r\n        {pages.map(page => (\r\n          <div\r\n            class=\"mypost\"\r\n            key={page}\r\n            className={page === currentPage ? 'page-item active' : 'page-item'}\r\n          >\r\n            <a className=\"page-link\" onClick={() => onPageChange(page)}>\r\n              {page}\r\n            </a>\r\n          </div>\r\n        ))}\r\n      </Pagination>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Paginations;\r\n","C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\component\\QuestionDetails.jsx",[],"C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\component\\Clock.jsx",["235","236"],"import React, { useState, useRef, useEffect } from 'react';\r\nimport { Button } from 'react-bootstrap';\r\nimport { useSelector } from 'react-redux';\r\nimport './clock.css';\r\n\r\n//import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n//import { faClock } from '@fortawesome/free-regular-svg-icons';\r\n\r\n//const element = <FontAwesomeIcon icon={faClock} />;\r\n\r\nconst Clock = ({ totalTime, testSubmitHandler }) => {\r\n  const [timer, setTimer] = useState(totalTime);\r\n  // const [isActive, setIsActive] = useState(false);\r\n  // const [isPaused, setIsPaused] = useState(false);\r\n  const countRef = useRef(null);\r\n\r\n  const handleStart = () => {\r\n    // start button logic here\r\n    // setIsActive(true);\r\n    // setIsPaused(true);\r\n    const count = parseInt(localStorage.getItem('time')) || totalTime;\r\n    setTimer(count);\r\n    countRef.current = setInterval(() => {\r\n      setTimer(timer => timer - 1);\r\n    }, 1000);\r\n  };\r\n\r\n  //   const handlePause = () => {\r\n  //     // Pause button logic here\r\n  //     clearInterval(countRef.current);\r\n  //     setIsPaused(false);\r\n  //   };\r\n\r\n  //   const handleResume = () => {\r\n  //     // Resume button logic here\r\n  //     setIsPaused(true);\r\n  //     countRef.current = setInterval(() => {\r\n  //       setTimer(timer => timer + 1);\r\n  //     }, 1000);\r\n  //   };\r\n\r\n  //   const handleReset = () => {\r\n  //     // Reset button logic here\r\n  //     clearInterval(countRef.current);\r\n  //     setIsActive(false);\r\n  //     setIsPaused(false);\r\n  //     setTimer(0);\r\n  //   };\r\n\r\n  const { loading } = useSelector(state => state.studentResponseSheet);\r\n  useEffect(() => {\r\n    if (loading) {\r\n      handleStart();\r\n    }\r\n  }, []);\r\n  const formatTime = () => {\r\n    if (localStorage.getItem('time') === null)\r\n      localStorage.setItem('time', timer);\r\n    else if (timer !== totalTime) localStorage.setItem('time', timer);\r\n\r\n    if (timer === 0) testSubmitHandler();\r\n\r\n    const getSeconds = `0${timer % 60}`.slice(-2);\r\n    const minutes = `${Math.floor(timer / 60)}`;\r\n    const getMinutes = `0${minutes % 60}`.slice(-2);\r\n    const getHours = `0${Math.floor(timer / 3600)}`.slice(-2);\r\n\r\n    return `${getHours} : ${getMinutes} : ${getSeconds}`;\r\n  };\r\n  return (\r\n    <div className=\"clock\" style={{ marginTop: '100px', marginLeft: '80px' }}>\r\n      <h3>Remaining Time</h3>\r\n      <div className=\"stopwatch-card\">\r\n        <p>{formatTime()}</p>\r\n        {/* <i className=\"fas fa-clock fa-4x\"></i> */}\r\n        <div className=\"buttons\">\r\n          {/* {!isActive && !isPaused ? ( */}\r\n          {/* <button onClick={handleStart}>Start</button> */}\r\n          {/* ) : isPaused ? (\r\n            <button onClick={handlePause}>Pause</button>\r\n          ) : (\r\n            <button onClick={handleResume}>Resume</button>\r\n          )}\r\n          <button onClick={handleReset} disabled={!isActive}>\r\n            Reset\r\n          </button> */}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Clock;\r\n","C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\actions\\studentRegistrationAction.jsx",["237"],"import * as student_reg from '../constants/studentRegistrationConstant';\r\nimport * as test from '../constants/testConstant';\r\nimport http from '../component/httpService';\r\nimport { toast } from 'react-toastify';\r\n\r\nexport const studentRegistrationForTest = students => async dispatch => {\r\n  try {\r\n    dispatch({ type: student_reg.STUDENT_REGISTRATION_REQUEST });\r\n\r\n    const { data } = await http.post('/api/student/register', students);\r\n\r\n    dispatch({ type: student_reg.STUDENT_REGISTRATION_SUCCESS });\r\n    toast.success(data);\r\n  } catch (error) {\r\n    if (\r\n      error.response &&\r\n      (error.response.status >= 400 || error.response.status <= 500)\r\n    ) {\r\n      toast.error(error.response.data);\r\n    }\r\n\r\n    dispatch({\r\n      type: student_reg.STUDENT_REGISTRATION_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const openRegistrationforTest = ({ testPapers, id, status }) => async (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  const STATUS = status ? 'OPEN' : 'CLOSE';\r\n  try {\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState();\r\n    const config = {\r\n      headers: {\r\n        'x-auth-token': `${userInfo.token}`,\r\n      },\r\n    };\r\n    const { data } = http.post(\r\n      '/api/test/change-registration-status',\r\n      { id, status },\r\n      config\r\n    );\r\n\r\n    dispatch({ type: `REGISTRATION_${STATUS}_SUCCESS` });\r\n\r\n    const arr = [...testPapers];\r\n    const index = arr.findIndex(test => test._id === id);\r\n\r\n    arr[index].isRegistrationAvailable = status;\r\n\r\n    dispatch({\r\n      type: test.TEST_LIST_SUCCESS,\r\n      payload: arr,\r\n    });\r\n    toast.success(data);\r\n  } catch (error) {\r\n    if (\r\n      error.response &&\r\n      (error.response.status >= 400 || error.response.status <= 500)\r\n    ) {\r\n      toast.error(error.response.data);\r\n    }\r\n\r\n    dispatch({\r\n      type: `REGISTRATION_${STATUS}_SUCCESS`,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const getStudentDetail = id => async dispatch => {\r\n  try {\r\n    dispatch({ type: student_reg.STUDENT_DETAIL_REQUEST });\r\n\r\n    const { data } = await http.post('/api/student/details', { id });\r\n\r\n    dispatch({\r\n      type: student_reg.STUDENT_DETAIL_SUCCESS,\r\n      payload: data,\r\n    });\r\n  } catch (error) {\r\n    if (\r\n      error.response &&\r\n      (error.response.status >= 400 || error.response.status <= 500)\r\n    ) {\r\n      toast.error(error.response.data);\r\n    }\r\n\r\n    dispatch({\r\n      type: student_reg.STUDENT_DETAIL_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const downloadResult = testId => async dispatch => {\r\n  try {\r\n    dispatch({ type: student_reg.RESULT_DOWNLOAD_REQUEST });\r\n\r\n    const { data } = await http.post('/api/result/download', { testId });\r\n\r\n    dispatch({ type: student_reg.RESULT_DOWNLOAD_SUCCESS });\r\n  } catch (error) {\r\n    if (\r\n      error.response &&\r\n      (error.response.status >= 400 || error.response.status <= 500)\r\n    ) {\r\n      toast.error(error.response.data);\r\n    }\r\n\r\n    dispatch({\r\n      type: student_reg.RESULT_DOWNLOAD_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n","C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\actions\\responseSheetAction.jsx",[],"C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\actions\\questionAction.jsx",[],"C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\actions\\testAction.jsx",[],"C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\constants\\responseSheetConstant.jsx",[],"C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\constants\\testConstant.jsx",[],"C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\constants\\studentRegistrationConstant.jsx",[],"C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\component\\httpService.jsx",["238"],"import axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\n\r\naxios.interceptors.response.use(null, (error) => {\r\n  const expectedError =\r\n    error.response &&\r\n    error.response.status >= 400 &&\r\n    error.response.status < 500;\r\n  if (!expectedError) {\r\n    toast.error(\"Unexpected error occured!\");\r\n  }\r\n\r\n  return Promise.reject(error);\r\n});\r\n\r\nexport default {\r\n  get: axios.get,\r\n  post: axios.post,\r\n  put: axios.put,\r\n  delete: axios.delete,\r\n};\r\n","C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\reducer\\supervisorReducer.jsx",[],"C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\constants\\supervisorConstant.jsx",[],"C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\screen\\SupervisorList.jsx",["239","240","241"],"import React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { supervisorList } from '../actions/supervisorAction';\r\nimport Loader from '../component/Loader';\r\nimport SupervisorTable from '../component/SupervisorTable';\r\n\r\nconst SupervisorList = ({ history }) => {\r\n  const { loading, supervisors, error } = useSelector(\r\n    state => state.supervisorList\r\n  );\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    if (!supervisors) {\r\n      dispatch(supervisorList());\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {loading && <Loader />}\r\n      {supervisors && (\r\n        <SupervisorTable supervisors={supervisors} permission={true} />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SupervisorList;\r\n","C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\actions\\supervisorAction.jsx",[],"C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\component\\SupervisorTable.jsx",["242","243","244"],"import React, { useState, useEffect } from \"react\";\r\nimport { Table, Row, Col, Button, Container } from \"react-bootstrap\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  removeSupervisor,\r\n  supervisorReqList,\r\n} from \"../actions/supervisorAction\";\r\nimport { updateSupervisor } from \"./../actions/supervisorAction\";\r\n\r\nconst SupervisorTable = ({ supervisors, permission }) => {\r\n  const dispatch = useDispatch();\r\n  const deleteHandler = (id) => {\r\n    if (window.confirm(\"Are you sure\")) {\r\n      dispatch(removeSupervisor(supervisors, id, permission));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Container>\r\n        <Row className=\"align-items-center\">\r\n          <Col>\r\n            <h3 style={{ color: \"black\" }}>Supervisor List</h3>\r\n          </Col>\r\n          {!permission && (\r\n            <Col className=\"text-right\">\r\n              <Button\r\n                className=\"my-3\"\r\n                onClick={() => dispatch(supervisorReqList())}\r\n              >\r\n                <i className=\"fas fa-sync\"></i>&nbsp;&nbsp;Reload\r\n              </Button>\r\n            </Col>\r\n          )}\r\n        </Row>\r\n        <Table hover bordered striped responsive>\r\n          <thead>\r\n            <tr>\r\n              <th>NAME</th>\r\n              <th>EMAIL</th>\r\n              <th>PERMISSION</th>\r\n              <th>&nbsp;&nbsp;REMOVE&nbsp;&nbsp;</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {supervisors &&\r\n              supervisors.map((supervisor, index) => (\r\n                <tr key={supervisor._id} style={{ textAlign: \"center\" }}>\r\n                  <td>{supervisor.name}</td>\r\n                  <td>{supervisor.email}</td>\r\n                  <td>\r\n                    {permission && (\r\n                      <Button\r\n                        variant=\"outline-primary\"\r\n                        className=\"btn btn-block\"\r\n                        onClick={() =>\r\n                          dispatch(updateSupervisor(supervisor, false))\r\n                        }\r\n                      >\r\n                        Revoke\r\n                      </Button>\r\n                    )}\r\n                    {!permission && (\r\n                      <Button\r\n                        variant=\"outline-primary\"\r\n                        className=\"btn btn-block\"\r\n                        onClick={() =>\r\n                          dispatch(updateSupervisor(supervisor, true))\r\n                        }\r\n                      >\r\n                        Grant\r\n                      </Button>\r\n                    )}\r\n                  </td>\r\n                  <td>\r\n                    <Button\r\n                      variant=\"outline-primary\"\r\n                      className=\"btn-sm\"\r\n                      onClick={() => deleteHandler(supervisor._id)}\r\n                    >\r\n                      <i className=\"fas fa-trash\"></i>\r\n                    </Button>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n          </tbody>\r\n        </Table>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SupervisorTable;\r\n","C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\screen\\SupervisorReqList.jsx",["245","246","247","248","249","250"],"import React, { useState, useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { supervisorReqList } from \"../actions/supervisorAction\";\r\nimport Loader from \"../component/Loader\";\r\nimport SupervisorTable from \"../component/SupervisorTable\";\r\nimport Webcam from \"react-webcam\";\r\nimport { uploadImage, getAllImages } from \"../actions/snapshots\";\r\n\r\nconst SupervisorReqList = ({ history }) => {\r\n  const { loading, supervisors, error } = useSelector(\r\n    (state) => state.supervisorReqList\r\n  );\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    if (!supervisors) {\r\n      dispatch(supervisorReqList());\r\n    }\r\n  }, []);\r\n\r\n  const webcamRef = React.useRef(null);\r\n  const [imgSrc, setImgSrc] = React.useState([]);\r\n\r\n  const capture = React.useCallback(async () => {\r\n    const imageSrc = webcamRef.current.getScreenshot();\r\n    // setImgSrc(imageSrc);\r\n    // console.log(typeof imageSrc);\r\n    // uploadImage(\r\n    //   \"5ff99d564fc5cb5548ff2a63\",\r\n    //   \"5ff99de74fc5cb5548ff2a64\",\r\n    //   imageSrc\r\n    // );\r\n    const images = await getAllImages(\r\n      \"5ffaa85f47ceb6585c25054b\",\r\n      \"5ffaa89c47ceb6585c25054c\"\r\n    );\r\n    console.log(images);\r\n    setImgSrc(images);\r\n  }, [webcamRef, setImgSrc]);\r\n\r\n  //ReactDOM.render(<WebcamCapture />, document.getElementById(\"root\"));\r\n\r\n  // https://www.npmjs.com/package/react-webcam\r\n\r\n  return (\r\n    <>\r\n      {loading && <Loader />}\r\n      {supervisors && (\r\n        <SupervisorTable supervisors={supervisors} permission={false} />\r\n      )}\r\n      <Webcam\r\n        audio={false}\r\n        ref={webcamRef}\r\n        screenshotFormat=\"image/jpeg\"\r\n        width={480}\r\n      />\r\n      <button onClick={capture}>Capture photo</button>\r\n      {imgSrc.length && imgSrc.map((i, j) => <img src={i} key={j} />)}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SupervisorReqList;\r\n","C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\screen\\StudentResult.jsx",["251","252"],"import React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { Row, Container, Col, Table, ListGroup, Button } from 'react-bootstrap';\r\nimport { resultGenerate } from '../actions/generateResultAction';\r\nimport { getStudentDetail } from '../actions/studentRegistrationAction';\r\nimport { getSinglePaper } from '../actions/testAction';\r\nimport Loader from '../component/Loader';\r\nimport SingleQuestion from '../component/SingleQuestion';\r\n\r\nconst StudentResult = () => {\r\n  const query = new URLSearchParams(useLocation().search);\r\n  const testId = query.get('testId');\r\n  const studentId = query.get('studentId');\r\n\r\n  const [show, setShow] = useState(false);\r\n  const [pos, setIndex] = useState(0);\r\n\r\n  const { loading, result } = useSelector(state => state.generateResult);\r\n  const { student } = useSelector(state => state.studentDetail);\r\n\r\n  const { paper } = useSelector(state => state.singleTestPaper);\r\n\r\n  const questions = paper && paper.questions;\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (!result) {\r\n      dispatch(getSinglePaper(testId));\r\n      dispatch(getStudentDetail(studentId));\r\n      dispatch(resultGenerate({ testId, studentId }));\r\n    }\r\n  }, []);\r\n\r\n  const set = index => {\r\n    setShow(true);\r\n    setIndex(index);\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      {loading && <Loader />}\r\n      <Row>\r\n        <Col className=\"align-items-left\">\r\n          <h3 style={{ color: 'black' }}>STUDENT RESULT</h3>\r\n        </Col>\r\n      </Row>\r\n      {student && (\r\n        <Table responsive className=\"my-2\">\r\n          <tbody>\r\n            <tr>\r\n              <td>\r\n                <strong>NAME </strong>\r\n              </td>\r\n              <td>{student.name.toUpperCase()}</td>\r\n            </tr>\r\n            <tr>\r\n              <td>\r\n                <strong>EMAIL </strong>\r\n              </td>\r\n              <td>{student.email}</td>\r\n            </tr>\r\n            <tr>\r\n              <td>\r\n                <strong>MOBILE NO. </strong>\r\n              </td>\r\n              <td>{student.phoneNum}</td>\r\n            </tr>\r\n            <tr>\r\n              <td>\r\n                <strong>MARKS(out of 10) </strong>\r\n              </td>\r\n              <td>{result && result.score}</td>\r\n            </tr>\r\n          </tbody>\r\n        </Table>\r\n      )}\r\n      <Table hover bordered striped responsive style={{ textAlign: 'center' }}>\r\n        <thead>\r\n          <tr>\r\n            <th>SNo.</th>\r\n            <th>View Question</th>\r\n            <th>Correct Answer</th>\r\n            <th>Given Answer</th>\r\n            <th>Weightage</th>\r\n            <th>Status</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {result &&\r\n            result.subResult.map((res, index) => (\r\n              <tr>\r\n                <td>{index + 1}</td>\r\n                <td>\r\n                  <Button\r\n                    variant=\"outline-primary\"\r\n                    className=\"Btn btn-block\"\r\n                    onClick={() => set(index)}\r\n                  >\r\n                    Details\r\n                  </Button>\r\n                </td>\r\n                <td>{res.correctAnswer.map(correct => correct)}</td>\r\n                <td>\r\n                  {res.response.length\r\n                    ? res.response.map(r => r)\r\n                    : 'Not Attempt'}\r\n                </td>\r\n                <td>{res.weightage}</td>\r\n                <td>\r\n                  {res.isCorrect ? (\r\n                    <i className=\"fas fa-check\" style={{ color: 'green' }}></i>\r\n                  ) : (\r\n                    <i className=\"fa fa-times\" style={{ color: 'red' }}></i>\r\n                  )}\r\n                </td>\r\n              </tr>\r\n            ))}\r\n        </tbody>\r\n      </Table>\r\n      {questions && (\r\n        <SingleQuestion\r\n          question={questions[pos]}\r\n          show={show}\r\n          setShow={setShow}\r\n        />\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default StudentResult;\r\n","C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\reducer\\generateResultReducer.jsx",[],"C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\component\\Statistics.jsx",[],"C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\actions\\generateResultAction.jsx",[],"C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\component\\SingleQuestion.jsx",[],"C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\constants\\generateResultConstant.jsx",[],"C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\utils\\paginate.jsx",[],"C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\screen\\EmailNotification.jsx",[],"C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\actions\\snapshots.jsx",[],"C:\\Users\\ASUS\\Desktop\\myproject online exam system\\client\\src\\utils\\Trainees.jsx",["253","254"],"import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Button, Table } from 'react-bootstrap';\r\nimport Loader from '../component/Loader';\r\nimport { getAllRegisteredStudent } from '../actions/studentRegistrationAction';\r\n\r\nconst Trainees = ({ id }) => {\r\n  const dispatch = useDispatch();\r\n  const { loading, registeredStudent: students } = useSelector(\r\n    state => state.registeredStudentList\r\n  );\r\n\r\n  useEffect(() => {\r\n    dispatch(getAllRegisteredStudent(id));\r\n  }, []);\r\n\r\n  const resultWindowHandler = studentId => {\r\n    window.open(`/student/test/result?testId=${id}&studentId=${studentId}`);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {loading && <Loader />}\r\n      <Button\r\n        className=\"my-3\"\r\n        onClick={() => dispatch(getAllRegisteredStudent(id))}\r\n      >\r\n        <i className=\"fas fa-sync\"></i>&nbsp;&nbsp;Reload\r\n      </Button>\r\n      <Table\r\n        hover\r\n        bordered\r\n        striped\r\n        responsive\r\n        style={{ textAlign: 'center', marginTop: '10px' }}\r\n      >\r\n        <thead>\r\n          <tr>\r\n            <th>SNo.</th>\r\n            <th>STUDENT NAME</th>\r\n            <th>EMAIL ID</th>\r\n            <th>MOBILE NO.</th>\r\n            <th>PERFORMANCE</th>\r\n            <th>SNAPSHOT</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {students &&\r\n            students.map((stud, index) => (\r\n              <tr key={index + 1}>\r\n                <td>{index + 1}</td>\r\n                <td>{stud.name}</td>\r\n                <td>{stud.email}</td>\r\n                <td>{stud.phoneNum}</td>\r\n                <td>\r\n                  <Button\r\n                    variant=\"outline-danger\"\r\n                    onClick={() => resultWindowHandler(stud._id)}\r\n                  >\r\n                    Result\r\n                  </Button>\r\n                </td>\r\n                <td>\r\n                  <Button variant=\"outline-danger\">SnapShot</Button>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n        </tbody>\r\n      </Table>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Trainees;\r\n",{"ruleId":"255","replacedBy":"256"},{"ruleId":"257","replacedBy":"258"},{"ruleId":"259","severity":1,"message":"260","line":11,"column":11,"nodeType":"261","messageId":"262","endLine":11,"endColumn":18},{"ruleId":"259","severity":1,"message":"263","line":11,"column":30,"nodeType":"261","messageId":"262","endLine":11,"endColumn":35},{"ruleId":"259","severity":1,"message":"264","line":6,"column":10,"nodeType":"261","messageId":"262","endLine":6,"endColumn":19},{"ruleId":"259","severity":1,"message":"265","line":22,"column":20,"nodeType":"261","messageId":"262","endLine":22,"endColumn":31},{"ruleId":"259","severity":1,"message":"265","line":30,"column":20,"nodeType":"261","messageId":"262","endLine":30,"endColumn":31},{"ruleId":"259","severity":1,"message":"263","line":32,"column":20,"nodeType":"261","messageId":"262","endLine":32,"endColumn":25},{"ruleId":"266","severity":1,"message":"267","line":41,"column":6,"nodeType":"268","endLine":41,"endColumn":8,"suggestions":"269"},{"ruleId":"266","severity":1,"message":"270","line":32,"column":6,"nodeType":"268","endLine":32,"endColumn":8,"suggestions":"271"},{"ruleId":"259","severity":1,"message":"272","line":62,"column":11,"nodeType":"261","messageId":"262","endLine":62,"endColumn":15},{"ruleId":"259","severity":1,"message":"273","line":84,"column":9,"nodeType":"261","messageId":"262","endLine":84,"endColumn":25},{"ruleId":"266","severity":1,"message":"274","line":31,"column":6,"nodeType":"268","endLine":31,"endColumn":8,"suggestions":"275"},{"ruleId":"276","severity":1,"message":"277","line":32,"column":13,"nodeType":"278","endLine":32,"endColumn":73},{"ruleId":"259","severity":1,"message":"279","line":2,"column":10,"nodeType":"261","messageId":"262","endLine":2,"endColumn":16},{"ruleId":"266","severity":1,"message":"280","line":55,"column":6,"nodeType":"268","endLine":55,"endColumn":8,"suggestions":"281"},{"ruleId":"259","severity":1,"message":"282","line":114,"column":13,"nodeType":"261","messageId":"262","endLine":114,"endColumn":17},{"ruleId":"283","severity":1,"message":"284","line":16,"column":1,"nodeType":"285","endLine":21,"endColumn":3},{"ruleId":"259","severity":1,"message":"286","line":1,"column":17,"nodeType":"261","messageId":"262","endLine":1,"endColumn":25},{"ruleId":"259","severity":1,"message":"263","line":8,"column":33,"nodeType":"261","messageId":"262","endLine":8,"endColumn":38},{"ruleId":"266","severity":1,"message":"287","line":16,"column":6,"nodeType":"268","endLine":16,"endColumn":8,"suggestions":"288"},{"ruleId":"259","severity":1,"message":"286","line":1,"column":17,"nodeType":"261","messageId":"262","endLine":1,"endColumn":25},{"ruleId":"259","severity":1,"message":"264","line":1,"column":27,"nodeType":"261","messageId":"262","endLine":1,"endColumn":36},{"ruleId":"259","severity":1,"message":"289","line":3,"column":10,"nodeType":"261","messageId":"262","endLine":3,"endColumn":21},{"ruleId":"259","severity":1,"message":"286","line":1,"column":17,"nodeType":"261","messageId":"262","endLine":1,"endColumn":25},{"ruleId":"259","severity":1,"message":"290","line":7,"column":10,"nodeType":"261","messageId":"262","endLine":7,"endColumn":21},{"ruleId":"259","severity":1,"message":"263","line":10,"column":33,"nodeType":"261","messageId":"262","endLine":10,"endColumn":38},{"ruleId":"266","severity":1,"message":"287","line":18,"column":6,"nodeType":"268","endLine":18,"endColumn":8,"suggestions":"291"},{"ruleId":"259","severity":1,"message":"292","line":24,"column":11,"nodeType":"261","messageId":"262","endLine":24,"endColumn":19},{"ruleId":"293","severity":1,"message":"294","line":57,"column":46,"nodeType":"278","endLine":57,"endColumn":69},{"ruleId":"259","severity":1,"message":"295","line":4,"column":38,"nodeType":"261","messageId":"262","endLine":4,"endColumn":47},{"ruleId":"266","severity":1,"message":"296","line":34,"column":6,"nodeType":"268","endLine":34,"endColumn":8,"suggestions":"297"},{"ruleId":"259","severity":1,"message":"286","line":1,"column":17,"nodeType":"261","messageId":"262","endLine":1,"endColumn":25},{"ruleId":"266","severity":1,"message":"298","line":15,"column":6,"nodeType":"268","endLine":15,"endColumn":8,"suggestions":"299"},"no-native-reassign",["300"],"no-negated-in-lhs",["301"],"no-unused-vars","'loading' is assigned a value but never used.","Identifier","unusedVar","'error' is assigned a value but never used.","'useEffect' is defined but never used.","'setPageSize' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'testPapers'. Either include them or remove the dependency array.","ArrayExpression",["302"],"React Hook useEffect has missing dependencies: 'dispatch', 'paper', 'studentId', and 'testId'. Either include them or remove the dependency array.",["303"],"'temp' is assigned a value but never used.","'videoConstraints' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'questions'. Either include them or remove the dependency array.",["304"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Button' is defined but never used.","React Hook useEffect has missing dependencies: 'handleStart' and 'loading'. Either include them or remove the dependency array.",["305"],"'data' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'useState' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'supervisors'. Either include them or remove the dependency array.",["306"],"'useSelector' is defined but never used.","'uploadImage' is defined but never used.",["307"],"'imageSrc' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'ListGroup' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'result', 'studentId', and 'testId'. Either include them or remove the dependency array.",["308"],"React Hook useEffect has missing dependencies: 'dispatch' and 'id'. Either include them or remove the dependency array.",["309"],"no-global-assign","no-unsafe-negation",{"desc":"310","fix":"311"},{"desc":"312","fix":"313"},{"desc":"314","fix":"315"},{"desc":"316","fix":"317"},{"desc":"318","fix":"319"},{"desc":"318","fix":"320"},{"desc":"321","fix":"322"},{"desc":"323","fix":"324"},"Update the dependencies array to be: [dispatch, testPapers]",{"range":"325","text":"326"},"Update the dependencies array to be: [dispatch, paper, studentId, testId]",{"range":"327","text":"328"},"Update the dependencies array to be: [dispatch, questions]",{"range":"329","text":"330"},"Update the dependencies array to be: [handleStart, loading]",{"range":"331","text":"332"},"Update the dependencies array to be: [dispatch, supervisors]",{"range":"333","text":"334"},{"range":"335","text":"334"},"Update the dependencies array to be: [dispatch, result, studentId, testId]",{"range":"336","text":"337"},"Update the dependencies array to be: [dispatch, id]",{"range":"338","text":"339"},[1167,1169],"[dispatch, testPapers]",[1198,1200],"[dispatch, paper, studentId, testId]",[889,891],"[dispatch, questions]",[1661,1663],"[handleStart, loading]",[547,549],"[dispatch, supervisors]",[664,666],[1299,1301],"[dispatch, result, studentId, testId]",[538,540],"[dispatch, id]"]